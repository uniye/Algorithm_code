#include <iostream>
using namespace std;

/*
규칙
직접 그려보면 답이 나옴
1~3번째 삼각형까지 변이 1
근데 이때 1번째와 3번째 삼각형의 변이 합쳐지면서
다음 삼각형의 변이 1+1= 2가 된다.

4~5번째 삼각형까지 변이 2
3번째와 5번째 삼각형의 변이 합쳐지며 
다음 삼각형의 변이 1+2 =3이 된다.
-> 여기까진 별다른 규칙이 없다.

6번째는 변이 3
2번째와 6번째 삼각형의 변이 합쳐지며 다음 삼각형의 변은 1+3=4가된다.

7번째는 변이 4
7번째와 1번째 삼각형의 변이 합쳐지며 다음 삼각형의 변은 1+4=5

8번째는 변이 5
8번째와 4번째 // 5+2=7이 된다

이런식으로 6번째 부터 식으로 나타내면 다음과 같다.
f[6]=f[5]+f[3]
f[7]=f[6]+f[2]
f[8]=f[7]+f[1]
f[9]=f[8]+f[4] => 여기서 부터 f[n]=f[n-1]+f[n-5]
f[10]=f[9]+f[5]
f[11]=f[10]+f[6] 
f[12]=f[11]+f[7]
...
6~8까지는 f[n]=f[n-1]+f[n-5]가 아니지만 공식에 대입해보면 똑같은 값이 나오는 것을 알 수 있다.
따라서 1~5번째 까지는 값을 넣어주고 나머지는 규칙대로 풀면 된다.
*/
int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);
    //미리 다 구해놓기
    long long dp[101];
    dp[0] = dp[1] = dp[2] = dp[3] = 1, dp[4] = dp[5] = 2;
    for (int i = 6; i <= 100; i++) {
        dp[i] = dp[i - 1] + dp[i - 5];
    }
    
    int T, N;
    cin >> T;
    for (int i = 0; i < T; i++) {
        cin >> N;
        cout << dp[N] << "\n";
    }
    return 0;
}

